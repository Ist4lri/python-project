#J'ai écrit deux codes pour la même fonction le premier ne retourne que le premier couple START/END de chaque exon
#Le second retourne la couverture génomique du transcript 
def split(file):
    mon_dict = dict()
    split = file.split(".")
    extension = split[1]
    print(extension)
    if extension == 'gtf' or extension == 'gff':
        G = open(file, 'r')
        for i in G:
            m = i.split("\t")
            Start_End = m[3] + "-" + m[4]
            gene_ID = m[8]
            if not mon_dict.get(gene_ID):
                mon_dict[gene_ID] = Start_End
        for key,value in mon_dict.items():
            print(key,value)
    else:
        print('Utilisez fichiers format gtf')
split("Documents/ILP/python/Projet/ensembl.gtf")  

########################################################################################################
########################################################################################################

def split(file):
    mon_dict = dict()
    mon_dict_Start = dict()
    mon_dict_End = dict()
    split = file.split(".")
    extension = split[1]
    print(extension)
    if extension == 'gtf' or extension == 'gff':
        #################Fonction qui permet de supprimer toutes lignes contenant la chaîne de caractère 'start'
        with open(file,"r+") as f:
            new_f = f.readlines()
            f.seek(0)
            for line in new_f:
                if "start" not in line:
                    f.write(line)
            f.truncate()
        ################
        G = open(file, 'r')
        for i in G:
            m = i.split("\t")
            Start = int(m[3])
            End = int(m[4])
            Start_End = str(Start) + "-" + str(End)
            transcript_ID = m[9]
            if not mon_dict.get(transcript_ID):
                mon_dict_Start[transcript_ID] = Start
                mon_dict_End[transcript_ID] = End
                mon_dict[transcript_ID] = Start_End
            else:
                if mon_dict_Start[transcript_ID] > Start:
                    mon_dict_Start[transcript_ID]= Start
                    mon_dict[transcript_ID] = str(mon_dict_Start[transcript_ID]) + "-" + str(mon_dict_End[transcript_ID])
                    if mon_dict_End[transcript_ID] < End:                   
                        mon_dict_End[transcript_ID] = End
                    
        for key,value in mon_dict.items():
            print(key,value)
    else:
        print('Utilisez fichiers format gtf')
split("Documents/ILP/python/Projet/ensembl.gtf")   
